From bd5406e1f2ffcf8664dd4d1464517fd3b8142769 Mon Sep 17 00:00:00 2001
From: Richard Genoud <richard.genoud@gmail.com>
Date: Tue, 30 Aug 2016 15:36:26 +0200
Subject: [PATCH] implement disp_cap override/fallback and cvbs support on
 amlogic

This implement cvbs support for amlogic processor.
cf: https://github.com/OpenELEC/OpenELEC.tv/issues/4502

This patch (originaly from hitn) add the CVBS as a fallback (or override).

Signed-off-by: Richard Genoud <richard.genoud@gmail.com>
---
 xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp | 88 ++++++++++++++++++++++++++++-
 1 file changed, 86 insertions(+), 2 deletions(-)

diff --git a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
index 21256ef95362..b48b04142d70 100644
--- a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
+++ b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
@@ -23,6 +23,8 @@
 #include "utils/AMLUtils.h"
 #include "utils/StringUtils.h"
 #include "utils/SysfsUtils.h"
+#include "utils/log.h"
+#include "filesystem/SpecialProtocol.h"
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -158,6 +160,32 @@ bool CEGLNativeTypeAmlogic::SetNativeResolution(const RESOLUTION_INFO &res)
           else
             SetDisplayResolution("1080p");
           break;
+        case 720:
+          if (!aml_IsHdmiConnected())
+          {
+            if (res.iScreenHeight == 480)
+              return SetDisplayResolution("480cvbs");
+            else
+              return SetDisplayResolution("576cvbs");
+          }
+          else
+          {
+            if (res.iScreenHeight == 480)
+            {
+              if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
+                return SetDisplayResolution("480i");
+              else
+                return SetDisplayResolution("480p");
+            }
+            else
+            {
+              if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
+                return SetDisplayResolution("576i");
+              else
+                return SetDisplayResolution("576p");
+            }
+          }
+          break;
       }
       break;
     case 50:
@@ -173,6 +201,32 @@ bool CEGLNativeTypeAmlogic::SetNativeResolution(const RESOLUTION_INFO &res)
           else
             SetDisplayResolution("1080p50hz");
           break;
+        case 720:
+          if (!aml_IsHdmiConnected())
+          {
+            if (res.iScreenHeight == 480)
+              return SetDisplayResolution("480cvbs");
+            else
+              return SetDisplayResolution("576cvbs");
+          }
+          else
+          {
+            if (res.iScreenHeight == 480)
+            {
+              if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
+                return SetDisplayResolution("480i");
+              else
+                return SetDisplayResolution("480p");
+            }
+            else
+            {
+              if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
+                return SetDisplayResolution("576i");
+              else
+                return SetDisplayResolution("576p");
+            }
+          }
+          break;
       }
       break;
     case 30:
@@ -188,8 +242,38 @@ bool CEGLNativeTypeAmlogic::SetNativeResolution(const RESOLUTION_INFO &res)
 
 bool CEGLNativeTypeAmlogic::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
 {
-  std::string valstr;
-  SysfsUtils::GetString("/sys/class/amhdmitx/amhdmitx0/disp_cap", valstr);
+  std::string valstr, overridefile, fallbackfile;
+  overridefile = CSpecialProtocol::TranslatePath("special://home/userdata/override_cap");
+  fallbackfile = CSpecialProtocol::TranslatePath("special://home/userdata/fallback_cap");
+
+  valstr = "";
+
+  if (SysfsUtils::Has(overridefile))
+  {
+    CLog::Log(LOGNOTICE, "Found file 'override_cap': Values for display capabilities will override any driver information.");
+    if (SysfsUtils::GetString(overridefile, valstr) < 0)
+      valstr = "";
+    if (valstr.length() == 0)
+      CLog::Log(LOGWARNING, "'override_cap' did not contain any information.");
+  }
+
+  if (valstr.length() == 0)
+  {
+    if (SysfsUtils::GetString("/sys/class/amhdmitx/amhdmitx0/disp_cap", valstr) < 0)
+      valstr = "";
+    if (valstr.length() == 0)
+      CLog::Log(LOGWARNING, "Driver did not report any display capabilities.");
+  }
+
+  if ((valstr.length() == 0) && (SysfsUtils::Has(fallbackfile)))
+  {
+    CLog::Log(LOGNOTICE, "Found file 'fallback_cap': Fallback values for display capabilities will be used since driver does not deliver any information.");
+    if (SysfsUtils::GetString(fallbackfile, valstr) < 0)
+      valstr = "";
+    if (valstr.length() == 0)
+      CLog::Log(LOGWARNING, "'fallback_cap' did not contain any information.");
+  }
+
   std::vector<std::string> probe_str = StringUtils::Split(valstr, "\n");
 
   resolutions.clear();
-- 
2.9.3

